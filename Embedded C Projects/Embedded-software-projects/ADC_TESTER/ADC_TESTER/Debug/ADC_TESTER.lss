
ADC_TESTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000380  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000404  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a46  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a9  00000000  00000000  00000f0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004b2  00000000  00000000  000015b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  00001a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f0  00000000  00000000  00001b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003ad  00000000  00000000  00001f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000022d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 41 01 	call	0x282	; 0x282 <main>
  64:	0c 94 be 01 	jmp	0x37c	; 0x37c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_Init>:
#include "ADC_Config.h"

void ADC_Init(void)
{
	//select Vref As Vcc(5v)
	SET(ADMUX, 6);
  6c:	87 b1       	in	r24, 0x07	; 7
  6e:	80 64       	ori	r24, 0x40	; 64
  70:	87 b9       	out	0x07, r24	; 7
	RESET(ADMUX, 7);
  72:	87 b1       	in	r24, 0x07	; 7
  74:	8f 77       	andi	r24, 0x7F	; 127
  76:	87 b9       	out	0x07, r24	; 7
	
	//ADJUSTEMENT right
	RESET(ADMUX, 5);
  78:	87 b1       	in	r24, 0x07	; 7
  7a:	8f 7d       	andi	r24, 0xDF	; 223
  7c:	87 b9       	out	0x07, r24	; 7
	
	//set single conversion mode
	RESET(ADCSRA, 5);
  7e:	86 b1       	in	r24, 0x06	; 6
  80:	8f 7d       	andi	r24, 0xDF	; 223
  82:	86 b9       	out	0x06, r24	; 6
	
	//set prescaler (division factor) 128
	SET(ADCSRA, 0);
  84:	86 b1       	in	r24, 0x06	; 6
  86:	81 60       	ori	r24, 0x01	; 1
  88:	86 b9       	out	0x06, r24	; 6
	SET(ADCSRA, 1);
  8a:	86 b1       	in	r24, 0x06	; 6
  8c:	82 60       	ori	r24, 0x02	; 2
  8e:	86 b9       	out	0x06, r24	; 6
	SET(ADCSRA, 2);
  90:	86 b1       	in	r24, 0x06	; 6
  92:	84 60       	ori	r24, 0x04	; 4
  94:	86 b9       	out	0x06, r24	; 6
	
	
	
	//Enable ADC
	SET(ADCSRA, 7);
  96:	86 b1       	in	r24, 0x06	; 6
  98:	80 68       	ori	r24, 0x80	; 128
  9a:	86 b9       	out	0x06, r24	; 6
  9c:	08 95       	ret

0000009e <ADC_GetDigitalVal>:
}
void ADC_GetDigitalVal(u16 *RetVal, u8 ChannelNum)
{
  9e:	fc 01       	movw	r30, r24
	if ((ChannelNum < 32) && (RetVal != NULL))
  a0:	60 32       	cpi	r22, 0x20	; 32
  a2:	a0 f4       	brcc	.+40     	; 0xcc <ADC_GetDigitalVal+0x2e>
  a4:	89 2b       	or	r24, r25
  a6:	91 f0       	breq	.+36     	; 0xcc <ADC_GetDigitalVal+0x2e>
	{
		//reset channel num
		ADMUX &= 0b11100000;
  a8:	97 b1       	in	r25, 0x07	; 7
  aa:	90 7e       	andi	r25, 0xE0	; 224
  ac:	97 b9       	out	0x07, r25	; 7
		//choose channel number
		ADMUX |= ChannelNum;
  ae:	97 b1       	in	r25, 0x07	; 7
  b0:	69 2b       	or	r22, r25
  b2:	67 b9       	out	0x07, r22	; 7
		
		//start conversion
		SET(ADCSRA, 6);
  b4:	96 b1       	in	r25, 0x06	; 6
  b6:	90 64       	ori	r25, 0x40	; 64
  b8:	96 b9       	out	0x06, r25	; 6
		
		//wait for the end of conversion
		while(GET_BIT(ADCSRA, 4) == 0);
  ba:	34 9b       	sbis	0x06, 4	; 6
  bc:	fe cf       	rjmp	.-4      	; 0xba <ADC_GetDigitalVal+0x1c>
		
		//clear the flag
		SET(ADCSRA, 4);
  be:	96 b1       	in	r25, 0x06	; 6
  c0:	90 61       	ori	r25, 0x10	; 16
  c2:	96 b9       	out	0x06, r25	; 6
		*RetVal = ADCU16;
  c4:	84 b1       	in	r24, 0x04	; 4
  c6:	95 b1       	in	r25, 0x05	; 5
  c8:	91 83       	std	Z+1, r25	; 0x01
  ca:	80 83       	st	Z, r24
  cc:	08 95       	ret

000000ce <DIO_SetPinDirection>:



void DIO_SetPinDirection(u8 PortId, u8 PinID, u8 PinDirection)
{
    switch (PortId)
  ce:	81 30       	cpi	r24, 0x01	; 1
  d0:	01 f1       	breq	.+64     	; 0x112 <DIO_SetPinDirection+0x44>
  d2:	30 f0       	brcs	.+12     	; 0xe0 <DIO_SetPinDirection+0x12>
  d4:	82 30       	cpi	r24, 0x02	; 2
  d6:	b1 f1       	breq	.+108    	; 0x144 <DIO_SetPinDirection+0x76>
  d8:	83 30       	cpi	r24, 0x03	; 3
  da:	09 f4       	brne	.+2      	; 0xde <DIO_SetPinDirection+0x10>
  dc:	4c c0       	rjmp	.+152    	; 0x176 <DIO_SetPinDirection+0xa8>
  de:	08 95       	ret
    {
    case DIO_PORTA:
      if (PinDirection == DIO_PIN_OUTPUT)
  e0:	41 30       	cpi	r20, 0x01	; 1
  e2:	59 f4       	brne	.+22     	; 0xfa <DIO_SetPinDirection+0x2c>
      {
         SET(DDRA, PinID);
  e4:	2a b3       	in	r18, 0x1a	; 26
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <DIO_SetPinDirection+0x22>
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <DIO_SetPinDirection+0x1e>
  f4:	82 2b       	or	r24, r18
  f6:	8a bb       	out	0x1a, r24	; 26
  f8:	08 95       	ret
      }
      else
      {
         RESET(DDRA, PinID);
  fa:	2a b3       	in	r18, 0x1a	; 26
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <DIO_SetPinDirection+0x38>
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	6a 95       	dec	r22
 108:	e2 f7       	brpl	.-8      	; 0x102 <DIO_SetPinDirection+0x34>
 10a:	80 95       	com	r24
 10c:	82 23       	and	r24, r18
 10e:	8a bb       	out	0x1a, r24	; 26
 110:	08 95       	ret
      }
      break;
   case DIO_PORTB:
      if (PinDirection == DIO_PIN_OUTPUT)
 112:	41 30       	cpi	r20, 0x01	; 1
 114:	59 f4       	brne	.+22     	; 0x12c <DIO_SetPinDirection+0x5e>
      {
         SET(DDRB, PinID);
 116:	27 b3       	in	r18, 0x17	; 23
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_SetPinDirection+0x54>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	6a 95       	dec	r22
 124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_SetPinDirection+0x50>
 126:	82 2b       	or	r24, r18
 128:	87 bb       	out	0x17, r24	; 23
 12a:	08 95       	ret
      }
      else
      {
         RESET(DDRB, PinID);
 12c:	27 b3       	in	r18, 0x17	; 23
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <DIO_SetPinDirection+0x6a>
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	6a 95       	dec	r22
 13a:	e2 f7       	brpl	.-8      	; 0x134 <DIO_SetPinDirection+0x66>
 13c:	80 95       	com	r24
 13e:	82 23       	and	r24, r18
 140:	87 bb       	out	0x17, r24	; 23
 142:	08 95       	ret
      }
      break;
   
   case DIO_PORTC:
      if (PinDirection == DIO_PIN_OUTPUT)
 144:	41 30       	cpi	r20, 0x01	; 1
 146:	59 f4       	brne	.+22     	; 0x15e <DIO_SetPinDirection+0x90>
      {
         SET(DDRC, PinID);
 148:	24 b3       	in	r18, 0x14	; 20
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_SetPinDirection+0x86>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	6a 95       	dec	r22
 156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_SetPinDirection+0x82>
 158:	82 2b       	or	r24, r18
 15a:	84 bb       	out	0x14, r24	; 20
 15c:	08 95       	ret
      }
      else
      {
         RESET(DDRC, PinID);
 15e:	24 b3       	in	r18, 0x14	; 20
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	02 c0       	rjmp	.+4      	; 0x16a <DIO_SetPinDirection+0x9c>
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	6a 95       	dec	r22
 16c:	e2 f7       	brpl	.-8      	; 0x166 <DIO_SetPinDirection+0x98>
 16e:	80 95       	com	r24
 170:	82 23       	and	r24, r18
 172:	84 bb       	out	0x14, r24	; 20
 174:	08 95       	ret
      }
      break;
   
   case DIO_PORTD:
      if (PinDirection == DIO_PIN_OUTPUT)
 176:	41 30       	cpi	r20, 0x01	; 1
 178:	59 f4       	brne	.+22     	; 0x190 <DIO_SetPinDirection+0xc2>
      {
         SET(DDRD, PinID);
 17a:	21 b3       	in	r18, 0x11	; 17
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	02 c0       	rjmp	.+4      	; 0x186 <DIO_SetPinDirection+0xb8>
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	6a 95       	dec	r22
 188:	e2 f7       	brpl	.-8      	; 0x182 <DIO_SetPinDirection+0xb4>
 18a:	82 2b       	or	r24, r18
 18c:	81 bb       	out	0x11, r24	; 17
 18e:	08 95       	ret
      }
      else
      {
         RESET(DDRD, PinID);
 190:	21 b3       	in	r18, 0x11	; 17
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_SetPinDirection+0xce>
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_SetPinDirection+0xca>
 1a0:	80 95       	com	r24
 1a2:	82 23       	and	r24, r18
 1a4:	81 bb       	out	0x11, r24	; 17
 1a6:	08 95       	ret

000001a8 <DIO_PinValue>:
     
}

void DIO_PinValue(u8 PortId, u8 PinID, u8 PinValue)
{
     switch (PortId)
 1a8:	81 30       	cpi	r24, 0x01	; 1
 1aa:	01 f1       	breq	.+64     	; 0x1ec <DIO_PinValue+0x44>
 1ac:	30 f0       	brcs	.+12     	; 0x1ba <DIO_PinValue+0x12>
 1ae:	82 30       	cpi	r24, 0x02	; 2
 1b0:	b1 f1       	breq	.+108    	; 0x21e <DIO_PinValue+0x76>
 1b2:	83 30       	cpi	r24, 0x03	; 3
 1b4:	09 f4       	brne	.+2      	; 0x1b8 <DIO_PinValue+0x10>
 1b6:	4c c0       	rjmp	.+152    	; 0x250 <DIO_PinValue+0xa8>
 1b8:	08 95       	ret
    {
    case DIO_PORTA:
      if (PinValue == HIGH)
 1ba:	41 30       	cpi	r20, 0x01	; 1
 1bc:	59 f4       	brne	.+22     	; 0x1d4 <DIO_PinValue+0x2c>
      {
         SET(PORTA, PinID);
 1be:	2b b3       	in	r18, 0x1b	; 27
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_PinValue+0x22>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_PinValue+0x1e>
 1ce:	82 2b       	or	r24, r18
 1d0:	8b bb       	out	0x1b, r24	; 27
 1d2:	08 95       	ret
      }
      else
      {
         RESET(PORTA, PinID);
 1d4:	2b b3       	in	r18, 0x1b	; 27
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <DIO_PinValue+0x38>
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	6a 95       	dec	r22
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <DIO_PinValue+0x34>
 1e4:	80 95       	com	r24
 1e6:	82 23       	and	r24, r18
 1e8:	8b bb       	out	0x1b, r24	; 27
 1ea:	08 95       	ret
      }
      break;
   case DIO_PORTB:
      if (PinValue == HIGH)
 1ec:	41 30       	cpi	r20, 0x01	; 1
 1ee:	59 f4       	brne	.+22     	; 0x206 <DIO_PinValue+0x5e>
      {
         SET(PORTB, PinID);
 1f0:	28 b3       	in	r18, 0x18	; 24
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_PinValue+0x54>
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	6a 95       	dec	r22
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_PinValue+0x50>
 200:	82 2b       	or	r24, r18
 202:	88 bb       	out	0x18, r24	; 24
 204:	08 95       	ret
      }
      else
      {
         RESET(PORTB, PinID);
 206:	28 b3       	in	r18, 0x18	; 24
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	02 c0       	rjmp	.+4      	; 0x212 <DIO_PinValue+0x6a>
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	6a 95       	dec	r22
 214:	e2 f7       	brpl	.-8      	; 0x20e <DIO_PinValue+0x66>
 216:	80 95       	com	r24
 218:	82 23       	and	r24, r18
 21a:	88 bb       	out	0x18, r24	; 24
 21c:	08 95       	ret
      }
      break;
   
   case DIO_PORTC:
      if (PinValue == HIGH)
 21e:	41 30       	cpi	r20, 0x01	; 1
 220:	59 f4       	brne	.+22     	; 0x238 <DIO_PinValue+0x90>
      {
         SET(PORTC, PinID);
 222:	25 b3       	in	r18, 0x15	; 21
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_PinValue+0x86>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	6a 95       	dec	r22
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_PinValue+0x82>
 232:	82 2b       	or	r24, r18
 234:	85 bb       	out	0x15, r24	; 21
 236:	08 95       	ret
      }
      else
      {
         RESET(PORTC, PinID);
 238:	25 b3       	in	r18, 0x15	; 21
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_PinValue+0x9c>
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	6a 95       	dec	r22
 246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_PinValue+0x98>
 248:	80 95       	com	r24
 24a:	82 23       	and	r24, r18
 24c:	85 bb       	out	0x15, r24	; 21
 24e:	08 95       	ret
      }
      break;
   
   case DIO_PORTD:
      if (PinValue == HIGH)
 250:	41 30       	cpi	r20, 0x01	; 1
 252:	59 f4       	brne	.+22     	; 0x26a <DIO_PinValue+0xc2>
      {
         SET(PORTD, PinID);
 254:	22 b3       	in	r18, 0x12	; 18
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_PinValue+0xb8>
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	6a 95       	dec	r22
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_PinValue+0xb4>
 264:	82 2b       	or	r24, r18
 266:	82 bb       	out	0x12, r24	; 18
 268:	08 95       	ret
      }
      else
      {
         RESET(PORTD, PinID);
 26a:	22 b3       	in	r18, 0x12	; 18
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_PinValue+0xce>
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	6a 95       	dec	r22
 278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_PinValue+0xca>
 27a:	80 95       	com	r24
 27c:	82 23       	and	r24, r18
 27e:	82 bb       	out	0x12, r24	; 18
 280:	08 95       	ret

00000282 <main>:

#include "ADC_Config.h"
#include "DIO_CONFIG.h"

int main(void)
{
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	00 d0       	rcall	.+0      	; 0x288 <main+0x6>
 288:	cd b7       	in	r28, 0x3d	; 61
 28a:	de b7       	in	r29, 0x3e	; 62
	ADC_Init();
 28c:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_Init>
	DIO_SetPinDirection(DIO_PORTA, PIN1, DIO_PIN_INPUT);
 290:	40 e0       	ldi	r20, 0x00	; 0
 292:	61 e0       	ldi	r22, 0x01	; 1
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	0e 94 67 00 	call	0xce	; 0xce <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTC, PIN2, DIO_PIN_OUTPUT);
 29a:	41 e0       	ldi	r20, 0x01	; 1
 29c:	62 e0       	ldi	r22, 0x02	; 2
 29e:	82 e0       	ldi	r24, 0x02	; 2
 2a0:	0e 94 67 00 	call	0xce	; 0xce <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTC, PIN7, DIO_PIN_OUTPUT);
 2a4:	41 e0       	ldi	r20, 0x01	; 1
 2a6:	67 e0       	ldi	r22, 0x07	; 7
 2a8:	82 e0       	ldi	r24, 0x02	; 2
 2aa:	0e 94 67 00 	call	0xce	; 0xce <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTD, PIN3, DIO_PIN_OUTPUT);
 2ae:	41 e0       	ldi	r20, 0x01	; 1
 2b0:	63 e0       	ldi	r22, 0x03	; 3
 2b2:	83 e0       	ldi	r24, 0x03	; 3
 2b4:	0e 94 67 00 	call	0xce	; 0xce <DIO_SetPinDirection>
	
	u16 RETURNDigitalValue, analog;
    /* Replace with your application code */
    while (1) 
    {
		ADC_GetDigitalVal(&RETURNDigitalValue, ADC_CHANNEL1);
 2b8:	61 e0       	ldi	r22, 0x01	; 1
 2ba:	ce 01       	movw	r24, r28
 2bc:	01 96       	adiw	r24, 0x01	; 1
 2be:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_GetDigitalVal>
         
		analog = ((u32)RETURNDigitalValue * 5000UL) / 1024;
 2c2:	29 81       	ldd	r18, Y+1	; 0x01
 2c4:	3a 81       	ldd	r19, Y+2	; 0x02
 2c6:	a8 e8       	ldi	r26, 0x88	; 136
 2c8:	b3 e1       	ldi	r27, 0x13	; 19
 2ca:	0e 94 af 01 	call	0x35e	; 0x35e <__umulhisi3>
 2ce:	dc 01       	movw	r26, r24
 2d0:	cb 01       	movw	r24, r22
 2d2:	07 2e       	mov	r0, r23
 2d4:	7a e0       	ldi	r23, 0x0A	; 10
 2d6:	b6 95       	lsr	r27
 2d8:	a7 95       	ror	r26
 2da:	97 95       	ror	r25
 2dc:	87 95       	ror	r24
 2de:	7a 95       	dec	r23
 2e0:	d1 f7       	brne	.-12     	; 0x2d6 <main+0x54>
 2e2:	70 2d       	mov	r23, r0
 2e4:	bc 01       	movw	r22, r24
		
		if (analog < 1500)
 2e6:	6c 3d       	cpi	r22, 0xDC	; 220
 2e8:	85 e0       	ldi	r24, 0x05	; 5
 2ea:	78 07       	cpc	r23, r24
 2ec:	80 f4       	brcc	.+32     	; 0x30e <main+0x8c>
		{
			
			DIO_PinValue(DIO_PORTC, PIN2, HIGH);
 2ee:	41 e0       	ldi	r20, 0x01	; 1
 2f0:	62 e0       	ldi	r22, 0x02	; 2
 2f2:	82 e0       	ldi	r24, 0x02	; 2
 2f4:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <DIO_PinValue>
			DIO_PinValue(DIO_PORTC, PIN7, LOW);
 2f8:	40 e0       	ldi	r20, 0x00	; 0
 2fa:	67 e0       	ldi	r22, 0x07	; 7
 2fc:	82 e0       	ldi	r24, 0x02	; 2
 2fe:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <DIO_PinValue>
			DIO_PinValue(DIO_PORTD, PIN3, LOW);
 302:	40 e0       	ldi	r20, 0x00	; 0
 304:	63 e0       	ldi	r22, 0x03	; 3
 306:	83 e0       	ldi	r24, 0x03	; 3
 308:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <DIO_PinValue>
 30c:	d5 cf       	rjmp	.-86     	; 0x2b8 <main+0x36>
			
		}
		else if (analog < 3000)
 30e:	68 3b       	cpi	r22, 0xB8	; 184
 310:	8b e0       	ldi	r24, 0x0B	; 11
 312:	78 07       	cpc	r23, r24
 314:	80 f4       	brcc	.+32     	; 0x336 <main+0xb4>
		{
			DIO_PinValue(DIO_PORTC, PIN2, LOW);
 316:	40 e0       	ldi	r20, 0x00	; 0
 318:	62 e0       	ldi	r22, 0x02	; 2
 31a:	82 e0       	ldi	r24, 0x02	; 2
 31c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <DIO_PinValue>
			DIO_PinValue(DIO_PORTC, PIN7, HIGH);
 320:	41 e0       	ldi	r20, 0x01	; 1
 322:	67 e0       	ldi	r22, 0x07	; 7
 324:	82 e0       	ldi	r24, 0x02	; 2
 326:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <DIO_PinValue>
			DIO_PinValue(DIO_PORTD, PIN3, LOW);
 32a:	40 e0       	ldi	r20, 0x00	; 0
 32c:	63 e0       	ldi	r22, 0x03	; 3
 32e:	83 e0       	ldi	r24, 0x03	; 3
 330:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <DIO_PinValue>
 334:	c1 cf       	rjmp	.-126    	; 0x2b8 <main+0x36>
		}
		else if (analog < 4500)
 336:	64 39       	cpi	r22, 0x94	; 148
 338:	71 41       	sbci	r23, 0x11	; 17
 33a:	08 f0       	brcs	.+2      	; 0x33e <main+0xbc>
 33c:	bd cf       	rjmp	.-134    	; 0x2b8 <main+0x36>
		{
			DIO_PinValue(DIO_PORTC, PIN2, LOW);
 33e:	40 e0       	ldi	r20, 0x00	; 0
 340:	62 e0       	ldi	r22, 0x02	; 2
 342:	82 e0       	ldi	r24, 0x02	; 2
 344:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <DIO_PinValue>
			DIO_PinValue(DIO_PORTC, PIN7, LOW);
 348:	40 e0       	ldi	r20, 0x00	; 0
 34a:	67 e0       	ldi	r22, 0x07	; 7
 34c:	82 e0       	ldi	r24, 0x02	; 2
 34e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <DIO_PinValue>
			DIO_PinValue(DIO_PORTD, PIN3, HIGH);
 352:	41 e0       	ldi	r20, 0x01	; 1
 354:	63 e0       	ldi	r22, 0x03	; 3
 356:	83 e0       	ldi	r24, 0x03	; 3
 358:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <DIO_PinValue>
 35c:	ad cf       	rjmp	.-166    	; 0x2b8 <main+0x36>

0000035e <__umulhisi3>:
 35e:	a2 9f       	mul	r26, r18
 360:	b0 01       	movw	r22, r0
 362:	b3 9f       	mul	r27, r19
 364:	c0 01       	movw	r24, r0
 366:	a3 9f       	mul	r26, r19
 368:	70 0d       	add	r23, r0
 36a:	81 1d       	adc	r24, r1
 36c:	11 24       	eor	r1, r1
 36e:	91 1d       	adc	r25, r1
 370:	b2 9f       	mul	r27, r18
 372:	70 0d       	add	r23, r0
 374:	81 1d       	adc	r24, r1
 376:	11 24       	eor	r1, r1
 378:	91 1d       	adc	r25, r1
 37a:	08 95       	ret

0000037c <_exit>:
 37c:	f8 94       	cli

0000037e <__stop_program>:
 37e:	ff cf       	rjmp	.-2      	; 0x37e <__stop_program>
