
Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000306  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000035a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000035a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000038c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a33  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000074b  00000000  00000000  00000e8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005ec  00000000  00000000  000015d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000114  00000000  00000000  00001bc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b6  00000000  00000000  00001cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000584  00000000  00000000  0000218e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002712  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3c 01 	call	0x278	; 0x278 <main>
  64:	0c 94 81 01 	jmp	0x302	; 0x302 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_SetPinDirection>:
      break;

}
   return PIN_state;

}
  6c:	81 30       	cpi	r24, 0x01	; 1
  6e:	01 f1       	breq	.+64     	; 0xb0 <DIO_SetPinDirection+0x44>
  70:	30 f0       	brcs	.+12     	; 0x7e <DIO_SetPinDirection+0x12>
  72:	82 30       	cpi	r24, 0x02	; 2
  74:	b1 f1       	breq	.+108    	; 0xe2 <DIO_SetPinDirection+0x76>
  76:	83 30       	cpi	r24, 0x03	; 3
  78:	09 f4       	brne	.+2      	; 0x7c <DIO_SetPinDirection+0x10>
  7a:	4c c0       	rjmp	.+152    	; 0x114 <DIO_SetPinDirection+0xa8>
  7c:	08 95       	ret
  7e:	41 30       	cpi	r20, 0x01	; 1
  80:	59 f4       	brne	.+22     	; 0x98 <DIO_SetPinDirection+0x2c>
  82:	2a b3       	in	r18, 0x1a	; 26
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	02 c0       	rjmp	.+4      	; 0x8e <DIO_SetPinDirection+0x22>
  8a:	88 0f       	add	r24, r24
  8c:	99 1f       	adc	r25, r25
  8e:	6a 95       	dec	r22
  90:	e2 f7       	brpl	.-8      	; 0x8a <DIO_SetPinDirection+0x1e>
  92:	82 2b       	or	r24, r18
  94:	8a bb       	out	0x1a, r24	; 26
  96:	08 95       	ret
  98:	2a b3       	in	r18, 0x1a	; 26
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <DIO_SetPinDirection+0x38>
  a0:	88 0f       	add	r24, r24
  a2:	99 1f       	adc	r25, r25
  a4:	6a 95       	dec	r22
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <DIO_SetPinDirection+0x34>
  a8:	80 95       	com	r24
  aa:	82 23       	and	r24, r18
  ac:	8a bb       	out	0x1a, r24	; 26
  ae:	08 95       	ret
  b0:	41 30       	cpi	r20, 0x01	; 1
  b2:	59 f4       	brne	.+22     	; 0xca <DIO_SetPinDirection+0x5e>
  b4:	27 b3       	in	r18, 0x17	; 23
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <DIO_SetPinDirection+0x54>
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <DIO_SetPinDirection+0x50>
  c4:	82 2b       	or	r24, r18
  c6:	87 bb       	out	0x17, r24	; 23
  c8:	08 95       	ret
  ca:	27 b3       	in	r18, 0x17	; 23
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <DIO_SetPinDirection+0x6a>
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <DIO_SetPinDirection+0x66>
  da:	80 95       	com	r24
  dc:	82 23       	and	r24, r18
  de:	87 bb       	out	0x17, r24	; 23
  e0:	08 95       	ret
  e2:	41 30       	cpi	r20, 0x01	; 1
  e4:	59 f4       	brne	.+22     	; 0xfc <DIO_SetPinDirection+0x90>
  e6:	24 b3       	in	r18, 0x14	; 20
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <DIO_SetPinDirection+0x86>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	6a 95       	dec	r22
  f4:	e2 f7       	brpl	.-8      	; 0xee <DIO_SetPinDirection+0x82>
  f6:	82 2b       	or	r24, r18
  f8:	84 bb       	out	0x14, r24	; 20
  fa:	08 95       	ret
  fc:	24 b3       	in	r18, 0x14	; 20
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <DIO_SetPinDirection+0x9c>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <DIO_SetPinDirection+0x98>
 10c:	80 95       	com	r24
 10e:	82 23       	and	r24, r18
 110:	84 bb       	out	0x14, r24	; 20
 112:	08 95       	ret
 114:	41 30       	cpi	r20, 0x01	; 1
 116:	59 f4       	brne	.+22     	; 0x12e <DIO_SetPinDirection+0xc2>
 118:	21 b3       	in	r18, 0x11	; 17
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_SetPinDirection+0xb8>
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	6a 95       	dec	r22
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_SetPinDirection+0xb4>
 128:	82 2b       	or	r24, r18
 12a:	81 bb       	out	0x11, r24	; 17
 12c:	08 95       	ret
 12e:	21 b3       	in	r18, 0x11	; 17
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_SetPinDirection+0xce>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_SetPinDirection+0xca>
 13e:	80 95       	com	r24
 140:	82 23       	and	r24, r18
 142:	81 bb       	out	0x11, r24	; 17
 144:	08 95       	ret

00000146 <DIO_TOGGLE_PIN>:

void DIO_TOGGLE_PIN(u8 PortId, u8 PinID)
{
    switch (PortId)
 146:	81 30       	cpi	r24, 0x01	; 1
 148:	89 f0       	breq	.+34     	; 0x16c <DIO_TOGGLE_PIN+0x26>
 14a:	28 f0       	brcs	.+10     	; 0x156 <DIO_TOGGLE_PIN+0x10>
 14c:	82 30       	cpi	r24, 0x02	; 2
 14e:	c9 f0       	breq	.+50     	; 0x182 <DIO_TOGGLE_PIN+0x3c>
 150:	83 30       	cpi	r24, 0x03	; 3
 152:	11 f1       	breq	.+68     	; 0x198 <DIO_TOGGLE_PIN+0x52>
 154:	08 95       	ret
    {
    case DIO_PORTA:
      TOGGLE(PORTA, PinID);
 156:	2b b3       	in	r18, 0x1b	; 27
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_TOGGLE_PIN+0x1c>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	6a 95       	dec	r22
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_TOGGLE_PIN+0x18>
 166:	82 27       	eor	r24, r18
 168:	8b bb       	out	0x1b, r24	; 27
      break;
 16a:	08 95       	ret
   case DIO_PORTB:
      TOGGLE(PORTB, PinID);
 16c:	28 b3       	in	r18, 0x18	; 24
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_TOGGLE_PIN+0x32>
 174:	88 0f       	add	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	6a 95       	dec	r22
 17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_TOGGLE_PIN+0x2e>
 17c:	82 27       	eor	r24, r18
 17e:	88 bb       	out	0x18, r24	; 24
      break;
 180:	08 95       	ret
   
   case DIO_PORTC:
      TOGGLE(PORTC, PinID);
 182:	25 b3       	in	r18, 0x15	; 21
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_TOGGLE_PIN+0x48>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	6a 95       	dec	r22
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_TOGGLE_PIN+0x44>
 192:	82 27       	eor	r24, r18
 194:	85 bb       	out	0x15, r24	; 21
      break;
 196:	08 95       	ret
   
   case DIO_PORTD:
      TOGGLE(PORTD, PinID);
 198:	22 b3       	in	r18, 0x12	; 18
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_TOGGLE_PIN+0x5e>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	6a 95       	dec	r22
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_TOGGLE_PIN+0x5a>
 1a8:	82 27       	eor	r24, r18
 1aa:	82 bb       	out	0x12, r24	; 18
 1ac:	08 95       	ret

000001ae <EXTI_enable>:


void EXTI_enable(EXTI_SOURCE_t InterruptSource, EXTI_TRIGGER_t InterruptTrigger) //External interrupt enabling function

{
	switch(InterruptSource)
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	61 f1       	breq	.+88     	; 0x20a <EXTI_enable+0x5c>
 1b2:	20 f0       	brcs	.+8      	; 0x1bc <EXTI_enable+0xe>
 1b4:	82 30       	cpi	r24, 0x02	; 2
 1b6:	09 f4       	brne	.+2      	; 0x1ba <EXTI_enable+0xc>
 1b8:	4f c0       	rjmp	.+158    	; 0x258 <EXTI_enable+0xaa>
 1ba:	08 95       	ret
	{
		case EXTI_INT0:
		   switch(InterruptTrigger)
 1bc:	61 30       	cpi	r22, 0x01	; 1
 1be:	69 f0       	breq	.+26     	; 0x1da <EXTI_enable+0x2c>
 1c0:	28 f0       	brcs	.+10     	; 0x1cc <EXTI_enable+0x1e>
 1c2:	62 30       	cpi	r22, 0x02	; 2
 1c4:	89 f0       	breq	.+34     	; 0x1e8 <EXTI_enable+0x3a>
 1c6:	63 30       	cpi	r22, 0x03	; 3
 1c8:	b1 f0       	breq	.+44     	; 0x1f6 <EXTI_enable+0x48>
 1ca:	1b c0       	rjmp	.+54     	; 0x202 <EXTI_enable+0x54>
		   {
		       case EXTI_RISING_EDGE:
			     RESET(MCUCSR, 2);
 1cc:	84 b7       	in	r24, 0x34	; 52
 1ce:	8b 7f       	andi	r24, 0xFB	; 251
 1d0:	84 bf       	out	0x34, r24	; 52
				 SET(MCUCSR, 3);
 1d2:	84 b7       	in	r24, 0x34	; 52
 1d4:	88 60       	ori	r24, 0x08	; 8
 1d6:	84 bf       	out	0x34, r24	; 52
				 break;
 1d8:	14 c0       	rjmp	.+40     	; 0x202 <EXTI_enable+0x54>
				 
			   case EXTI_FALLING_EDGE:
			     SET(MCUCSR, 2);
 1da:	84 b7       	in	r24, 0x34	; 52
 1dc:	84 60       	ori	r24, 0x04	; 4
 1de:	84 bf       	out	0x34, r24	; 52
			     SET(MCUCSR, 3);
 1e0:	84 b7       	in	r24, 0x34	; 52
 1e2:	88 60       	ori	r24, 0x08	; 8
 1e4:	84 bf       	out	0x34, r24	; 52
			     break;
 1e6:	0d c0       	rjmp	.+26     	; 0x202 <EXTI_enable+0x54>
			   
			   case EXTI_LOW_LEVEL:
			     RESET(MCUCSR, 2);
 1e8:	84 b7       	in	r24, 0x34	; 52
 1ea:	8b 7f       	andi	r24, 0xFB	; 251
 1ec:	84 bf       	out	0x34, r24	; 52
			     RESET(MCUCSR, 3);
 1ee:	84 b7       	in	r24, 0x34	; 52
 1f0:	87 7f       	andi	r24, 0xF7	; 247
 1f2:	84 bf       	out	0x34, r24	; 52
			     break;
 1f4:	06 c0       	rjmp	.+12     	; 0x202 <EXTI_enable+0x54>
			   
			   case EXTI_ANY_LOGICAL_CHANGE:
			     SET(MCUCSR, 2);
 1f6:	84 b7       	in	r24, 0x34	; 52
 1f8:	84 60       	ori	r24, 0x04	; 4
 1fa:	84 bf       	out	0x34, r24	; 52
			     RESET(MCUCSR, 3);
 1fc:	84 b7       	in	r24, 0x34	; 52
 1fe:	87 7f       	andi	r24, 0xF7	; 247
 200:	84 bf       	out	0x34, r24	; 52
			     break;
		   }
		   SET(GICR, 6);
 202:	8b b7       	in	r24, 0x3b	; 59
 204:	80 64       	ori	r24, 0x40	; 64
 206:	8b bf       	out	0x3b, r24	; 59
		   break;
 208:	08 95       	ret
		   
		case EXTI_INT1:
		 switch(InterruptTrigger)
 20a:	61 30       	cpi	r22, 0x01	; 1
 20c:	69 f0       	breq	.+26     	; 0x228 <EXTI_enable+0x7a>
 20e:	28 f0       	brcs	.+10     	; 0x21a <EXTI_enable+0x6c>
 210:	62 30       	cpi	r22, 0x02	; 2
 212:	89 f0       	breq	.+34     	; 0x236 <EXTI_enable+0x88>
 214:	63 30       	cpi	r22, 0x03	; 3
 216:	b1 f0       	breq	.+44     	; 0x244 <EXTI_enable+0x96>
 218:	1b c0       	rjmp	.+54     	; 0x250 <EXTI_enable+0xa2>
		 {
			 case EXTI_RISING_EDGE:
			 RESET(MCUCSR, 0);
 21a:	84 b7       	in	r24, 0x34	; 52
 21c:	8e 7f       	andi	r24, 0xFE	; 254
 21e:	84 bf       	out	0x34, r24	; 52
			 SET(MCUCSR, 1);
 220:	84 b7       	in	r24, 0x34	; 52
 222:	82 60       	ori	r24, 0x02	; 2
 224:	84 bf       	out	0x34, r24	; 52
			 break;
 226:	14 c0       	rjmp	.+40     	; 0x250 <EXTI_enable+0xa2>
			 
			 case EXTI_FALLING_EDGE:
			 SET(MCUCSR, 0);
 228:	84 b7       	in	r24, 0x34	; 52
 22a:	81 60       	ori	r24, 0x01	; 1
 22c:	84 bf       	out	0x34, r24	; 52
			 SET(MCUCSR, 1);
 22e:	84 b7       	in	r24, 0x34	; 52
 230:	82 60       	ori	r24, 0x02	; 2
 232:	84 bf       	out	0x34, r24	; 52
			 break;
 234:	0d c0       	rjmp	.+26     	; 0x250 <EXTI_enable+0xa2>
			 
			 case EXTI_LOW_LEVEL:
			 RESET(MCUCSR, 0);
 236:	84 b7       	in	r24, 0x34	; 52
 238:	8e 7f       	andi	r24, 0xFE	; 254
 23a:	84 bf       	out	0x34, r24	; 52
			 RESET(MCUCSR, 1);
 23c:	84 b7       	in	r24, 0x34	; 52
 23e:	8d 7f       	andi	r24, 0xFD	; 253
 240:	84 bf       	out	0x34, r24	; 52
			 break;
 242:	06 c0       	rjmp	.+12     	; 0x250 <EXTI_enable+0xa2>
			 
			 case EXTI_ANY_LOGICAL_CHANGE:
			 SET(MCUCSR, 0);
 244:	84 b7       	in	r24, 0x34	; 52
 246:	81 60       	ori	r24, 0x01	; 1
 248:	84 bf       	out	0x34, r24	; 52
			 RESET(MCUCSR, 1);
 24a:	84 b7       	in	r24, 0x34	; 52
 24c:	8d 7f       	andi	r24, 0xFD	; 253
 24e:	84 bf       	out	0x34, r24	; 52
			 break;
		 }
		   SET(GICR, 7);
 250:	8b b7       	in	r24, 0x3b	; 59
 252:	80 68       	ori	r24, 0x80	; 128
 254:	8b bf       	out	0x3b, r24	; 59
		   break;
 256:	08 95       	ret
		
		case EXTI_INT2:
		 switch (InterruptTrigger)
 258:	66 23       	and	r22, r22
 25a:	19 f0       	breq	.+6      	; 0x262 <EXTI_enable+0xb4>
 25c:	61 30       	cpi	r22, 0x01	; 1
 25e:	29 f0       	breq	.+10     	; 0x26a <EXTI_enable+0xbc>
 260:	07 c0       	rjmp	.+14     	; 0x270 <EXTI_enable+0xc2>
		 {
			 case EXTI_RISING_EDGE:
			      SET(MCUCSR, 6);
 262:	84 b7       	in	r24, 0x34	; 52
 264:	80 64       	ori	r24, 0x40	; 64
 266:	84 bf       	out	0x34, r24	; 52
			      break;
 268:	03 c0       	rjmp	.+6      	; 0x270 <EXTI_enable+0xc2>
			 
			 case EXTI_FALLING_EDGE:
			      RESET(MCUCSR, 6);
 26a:	84 b7       	in	r24, 0x34	; 52
 26c:	8f 7b       	andi	r24, 0xBF	; 191
 26e:	84 bf       	out	0x34, r24	; 52
			      break;
			 
		 }
		   SET(GICR, 5);
 270:	8b b7       	in	r24, 0x3b	; 59
 272:	80 62       	ori	r24, 0x20	; 32
 274:	8b bf       	out	0x3b, r24	; 59
 276:	08 95       	ret

00000278 <main>:

int main(void)
{

    /* Replace with your application code */
	DIO_SetPinDirection(DIO_PORTC, PIN2, DIO_PIN_OUTPUT); //LED0
 278:	41 e0       	ldi	r20, 0x01	; 1
 27a:	62 e0       	ldi	r22, 0x02	; 2
 27c:	82 e0       	ldi	r24, 0x02	; 2
 27e:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTD, PIN3, DIO_PIN_OUTPUT); //LED2
 282:	41 e0       	ldi	r20, 0x01	; 1
 284:	63 e0       	ldi	r22, 0x03	; 3
 286:	83 e0       	ldi	r24, 0x03	; 3
 288:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
	
	SET(SREG, 7); //Enable Global interrupt (SERG the register who has the global interrupt (pin 7))
 28c:	8f b7       	in	r24, 0x3f	; 63
 28e:	80 68       	ori	r24, 0x80	; 128
 290:	8f bf       	out	0x3f, r24	; 63
	EXTI_enable(EXTI_INT0, EXTI_RISING_EDGE);
 292:	60 e0       	ldi	r22, 0x00	; 0
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	0e 94 d7 00 	call	0x1ae	; 0x1ae <EXTI_enable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29a:	2f ef       	ldi	r18, 0xFF	; 255
 29c:	89 e6       	ldi	r24, 0x69	; 105
 29e:	98 e1       	ldi	r25, 0x18	; 24
 2a0:	21 50       	subi	r18, 0x01	; 1
 2a2:	80 40       	sbci	r24, 0x00	; 0
 2a4:	90 40       	sbci	r25, 0x00	; 0
 2a6:	e1 f7       	brne	.-8      	; 0x2a0 <main+0x28>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <main+0x32>
 2aa:	00 00       	nop
	
    while (1) 
    {
		_delay_ms(500);
		DIO_TOGGLE_PIN(DIO_PORTD, PIN3);
 2ac:	63 e0       	ldi	r22, 0x03	; 3
 2ae:	83 e0       	ldi	r24, 0x03	; 3
 2b0:	0e 94 a3 00 	call	0x146	; 0x146 <DIO_TOGGLE_PIN>
 2b4:	f2 cf       	rjmp	.-28     	; 0x29a <main+0x22>

000002b6 <__vector_1>:

// ISR Function prototype

void __vector_1(void)__attribute__((signal));
void __vector_1(void)
{
 2b6:	1f 92       	push	r1
 2b8:	0f 92       	push	r0
 2ba:	0f b6       	in	r0, 0x3f	; 63
 2bc:	0f 92       	push	r0
 2be:	11 24       	eor	r1, r1
 2c0:	2f 93       	push	r18
 2c2:	3f 93       	push	r19
 2c4:	4f 93       	push	r20
 2c6:	5f 93       	push	r21
 2c8:	6f 93       	push	r22
 2ca:	7f 93       	push	r23
 2cc:	8f 93       	push	r24
 2ce:	9f 93       	push	r25
 2d0:	af 93       	push	r26
 2d2:	bf 93       	push	r27
 2d4:	ef 93       	push	r30
 2d6:	ff 93       	push	r31
	DIO_TOGGLE_PIN (DIO_PORTC,PIN2);
 2d8:	62 e0       	ldi	r22, 0x02	; 2
 2da:	82 e0       	ldi	r24, 0x02	; 2
 2dc:	0e 94 a3 00 	call	0x146	; 0x146 <DIO_TOGGLE_PIN>
 2e0:	ff 91       	pop	r31
 2e2:	ef 91       	pop	r30
 2e4:	bf 91       	pop	r27
 2e6:	af 91       	pop	r26
 2e8:	9f 91       	pop	r25
 2ea:	8f 91       	pop	r24
 2ec:	7f 91       	pop	r23
 2ee:	6f 91       	pop	r22
 2f0:	5f 91       	pop	r21
 2f2:	4f 91       	pop	r20
 2f4:	3f 91       	pop	r19
 2f6:	2f 91       	pop	r18
 2f8:	0f 90       	pop	r0
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	0f 90       	pop	r0
 2fe:	1f 90       	pop	r1
 300:	18 95       	reti

00000302 <_exit>:
 302:	f8 94       	cli

00000304 <__stop_program>:
 304:	ff cf       	rjmp	.-2      	; 0x304 <__stop_program>
